#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sfe.dal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SFE")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdoption(Adoption instance);
    partial void UpdateAdoption(Adoption instance);
    partial void DeleteAdoption(Adoption instance);
    partial void InsertVisitType(VisitType instance);
    partial void UpdateVisitType(VisitType instance);
    partial void DeleteVisitType(VisitType instance);
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertClientType(ClientType instance);
    partial void UpdateClientType(ClientType instance);
    partial void DeleteClientType(ClientType instance);
    partial void InsertOption(Option instance);
    partial void UpdateOption(Option instance);
    partial void DeleteOption(Option instance);
    partial void InsertPotential(Potential instance);
    partial void UpdatePotential(Potential instance);
    partial void DeletePotential(Potential instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductsPerVisit(ProductsPerVisit instance);
    partial void UpdateProductsPerVisit(ProductsPerVisit instance);
    partial void DeleteProductsPerVisit(ProductsPerVisit instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertReaction(Reaction instance);
    partial void UpdateReaction(Reaction instance);
    partial void DeleteReaction(Reaction instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::sfe.dal.Properties.Settings.Default.SFEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adoption> Adoptions
		{
			get
			{
				return this.GetTable<Adoption>();
			}
		}
		
		public System.Data.Linq.Table<VisitType> VisitTypes
		{
			get
			{
				return this.GetTable<VisitType>();
			}
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<ClientType> ClientTypes
		{
			get
			{
				return this.GetTable<ClientType>();
			}
		}
		
		public System.Data.Linq.Table<Option> Options
		{
			get
			{
				return this.GetTable<Option>();
			}
		}
		
		public System.Data.Linq.Table<Potential> Potentials
		{
			get
			{
				return this.GetTable<Potential>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductsPerVisit> ProductsPerVisits
		{
			get
			{
				return this.GetTable<ProductsPerVisit>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Reaction> Reactions
		{
			get
			{
				return this.GetTable<Reaction>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adoptions")]
	public partial class Adoption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAdoption;
		
		private string _name;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAdoptionChanging(int value);
    partial void OnidAdoptionChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Adoption()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAdoption", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAdoption
		{
			get
			{
				return this._idAdoption;
			}
			set
			{
				if ((this._idAdoption != value))
				{
					this.OnidAdoptionChanging(value);
					this.SendPropertyChanging();
					this._idAdoption = value;
					this.SendPropertyChanged("idAdoption");
					this.OnidAdoptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adoption_Client", Storage="_Clients", ThisKey="idAdoption", OtherKey="FK_adoption")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Adoption = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Adoption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisitTypes")]
	public partial class VisitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVisitType;
		
		private string _name;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVisitTypeChanging(int value);
    partial void OnidVisitTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public VisitType()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVisitType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVisitType
		{
			get
			{
				return this._idVisitType;
			}
			set
			{
				if ((this._idVisitType != value))
				{
					this.OnidVisitTypeChanging(value);
					this.SendPropertyChanging();
					this._idVisitType = value;
					this.SendPropertyChanged("idVisitType");
					this.OnidVisitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisitType_Visit", Storage="_Visits", ThisKey="idVisitType", OtherKey="FK_visitType")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.VisitType = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.VisitType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAnswer;
		
		private System.DateTime _date;
		
		private int _FK_option;
		
		private int _FK_client;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Option> _Option;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAnswerChanging(int value);
    partial void OnidAnswerChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnFK_optionChanging(int value);
    partial void OnFK_optionChanged();
    partial void OnFK_clientChanging(int value);
    partial void OnFK_clientChanged();
    #endregion
		
		public Answer()
		{
			this._Client = default(EntityRef<Client>);
			this._Option = default(EntityRef<Option>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAnswer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAnswer
		{
			get
			{
				return this._idAnswer;
			}
			set
			{
				if ((this._idAnswer != value))
				{
					this.OnidAnswerChanging(value);
					this.SendPropertyChanging();
					this._idAnswer = value;
					this.SendPropertyChanged("idAnswer");
					this.OnidAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_option", DbType="Int NOT NULL")]
		public int FK_option
		{
			get
			{
				return this._FK_option;
			}
			set
			{
				if ((this._FK_option != value))
				{
					if (this._Option.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_optionChanging(value);
					this.SendPropertyChanging();
					this._FK_option = value;
					this.SendPropertyChanged("FK_option");
					this.OnFK_optionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_client", DbType="Int NOT NULL")]
		public int FK_client
		{
			get
			{
				return this._FK_client;
			}
			set
			{
				if ((this._FK_client != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_clientChanging(value);
					this.SendPropertyChanging();
					this._FK_client = value;
					this.SendPropertyChanged("FK_client");
					this.OnFK_clientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Answer", Storage="_Client", ThisKey="FK_client", OtherKey="idClient", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._FK_client = value.idClient;
					}
					else
					{
						this._FK_client = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_Answer", Storage="_Option", ThisKey="FK_option", OtherKey="idOption", IsForeignKey=true)]
		public Option Option
		{
			get
			{
				return this._Option.Entity;
			}
			set
			{
				Option previousValue = this._Option.Entity;
				if (((previousValue != value) 
							|| (this._Option.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Option.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Option.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._FK_option = value.idOption;
					}
					else
					{
						this._FK_option = default(int);
					}
					this.SendPropertyChanged("Option");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClient;
		
		private string _name;
		
		private string _lastName;
		
		private System.DateTime _creationDate;
		
		private string _speciality;
		
		private string _country;
		
		private string _province;
		
		private string _address1;
		
		private string _address2;
		
		private string _zone;
		
		private System.Nullable<float> _latitude;
		
		private System.Nullable<float> _longitude;
		
		private string _email;
		
		private string _phone1;
		
		private string _phone2;
		
		private bool _active;
		
		private int _maxNumVisits;
		
		private int _FK_adoption;
		
		private int _FK_potential;
		
		private int _FK_clientType;
		
		private int _FK_user;
		
		private EntitySet<Answer> _Answers;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<Adoption> _Adoption;
		
		private EntityRef<ClientType> _ClientType;
		
		private EntityRef<Potential> _Potential;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClientChanging(int value);
    partial void OnidClientChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OnspecialityChanging(string value);
    partial void OnspecialityChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void OnzoneChanging(string value);
    partial void OnzoneChanged();
    partial void OnlatitudeChanging(System.Nullable<float> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<float> value);
    partial void OnlongitudeChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onphone1Changing(string value);
    partial void Onphone1Changed();
    partial void Onphone2Changing(string value);
    partial void Onphone2Changed();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnmaxNumVisitsChanging(int value);
    partial void OnmaxNumVisitsChanged();
    partial void OnFK_adoptionChanging(int value);
    partial void OnFK_adoptionChanged();
    partial void OnFK_potentialChanging(int value);
    partial void OnFK_potentialChanged();
    partial void OnFK_clientTypeChanging(int value);
    partial void OnFK_clientTypeChanged();
    partial void OnFK_userChanging(int value);
    partial void OnFK_userChanged();
    #endregion
		
		public Client()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._Adoption = default(EntityRef<Adoption>);
			this._ClientType = default(EntityRef<ClientType>);
			this._Potential = default(EntityRef<Potential>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClient
		{
			get
			{
				return this._idClient;
			}
			set
			{
				if ((this._idClient != value))
				{
					this.OnidClientChanging(value);
					this.SendPropertyChanging();
					this._idClient = value;
					this.SendPropertyChanged("idClient");
					this.OnidClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="DateTime NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speciality", DbType="VarChar(50)")]
		public string speciality
		{
			get
			{
				return this._speciality;
			}
			set
			{
				if ((this._speciality != value))
				{
					this.OnspecialityChanging(value);
					this.SendPropertyChanging();
					this._speciality = value;
					this.SendPropertyChanged("speciality");
					this.OnspecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="VarChar(100)")]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address1", DbType="VarChar(400)")]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="VarChar(400)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zone", DbType="VarChar(50)")]
		public string zone
		{
			get
			{
				return this._zone;
			}
			set
			{
				if ((this._zone != value))
				{
					this.OnzoneChanging(value);
					this.SendPropertyChanging();
					this._zone = value;
					this.SendPropertyChanged("zone");
					this.OnzoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Real")]
		public System.Nullable<float> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Real")]
		public System.Nullable<float> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone1", DbType="VarChar(20)")]
		public string phone1
		{
			get
			{
				return this._phone1;
			}
			set
			{
				if ((this._phone1 != value))
				{
					this.Onphone1Changing(value);
					this.SendPropertyChanging();
					this._phone1 = value;
					this.SendPropertyChanged("phone1");
					this.Onphone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone2", DbType="VarChar(20)")]
		public string phone2
		{
			get
			{
				return this._phone2;
			}
			set
			{
				if ((this._phone2 != value))
				{
					this.Onphone2Changing(value);
					this.SendPropertyChanging();
					this._phone2 = value;
					this.SendPropertyChanged("phone2");
					this.Onphone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maxNumVisits", DbType="Int NOT NULL")]
		public int maxNumVisits
		{
			get
			{
				return this._maxNumVisits;
			}
			set
			{
				if ((this._maxNumVisits != value))
				{
					this.OnmaxNumVisitsChanging(value);
					this.SendPropertyChanging();
					this._maxNumVisits = value;
					this.SendPropertyChanged("maxNumVisits");
					this.OnmaxNumVisitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_adoption", DbType="Int NOT NULL")]
		public int FK_adoption
		{
			get
			{
				return this._FK_adoption;
			}
			set
			{
				if ((this._FK_adoption != value))
				{
					if (this._Adoption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_adoptionChanging(value);
					this.SendPropertyChanging();
					this._FK_adoption = value;
					this.SendPropertyChanged("FK_adoption");
					this.OnFK_adoptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_potential", DbType="Int NOT NULL")]
		public int FK_potential
		{
			get
			{
				return this._FK_potential;
			}
			set
			{
				if ((this._FK_potential != value))
				{
					if (this._Potential.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_potentialChanging(value);
					this.SendPropertyChanging();
					this._FK_potential = value;
					this.SendPropertyChanged("FK_potential");
					this.OnFK_potentialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_clientType", DbType="Int NOT NULL")]
		public int FK_clientType
		{
			get
			{
				return this._FK_clientType;
			}
			set
			{
				if ((this._FK_clientType != value))
				{
					if (this._ClientType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_clientTypeChanging(value);
					this.SendPropertyChanging();
					this._FK_clientType = value;
					this.SendPropertyChanged("FK_clientType");
					this.OnFK_clientTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_user", DbType="Int NOT NULL")]
		public int FK_user
		{
			get
			{
				return this._FK_user;
			}
			set
			{
				if ((this._FK_user != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_userChanging(value);
					this.SendPropertyChanging();
					this._FK_user = value;
					this.SendPropertyChanged("FK_user");
					this.OnFK_userChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Answer", Storage="_Answers", ThisKey="idClient", OtherKey="FK_client")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Visit", Storage="_Visits", ThisKey="idClient", OtherKey="FK_client")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adoption_Client", Storage="_Adoption", ThisKey="FK_adoption", OtherKey="idAdoption", IsForeignKey=true)]
		public Adoption Adoption
		{
			get
			{
				return this._Adoption.Entity;
			}
			set
			{
				Adoption previousValue = this._Adoption.Entity;
				if (((previousValue != value) 
							|| (this._Adoption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adoption.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Adoption.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._FK_adoption = value.idAdoption;
					}
					else
					{
						this._FK_adoption = default(int);
					}
					this.SendPropertyChanged("Adoption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Client", Storage="_ClientType", ThisKey="FK_clientType", OtherKey="idClientType", IsForeignKey=true)]
		public ClientType ClientType
		{
			get
			{
				return this._ClientType.Entity;
			}
			set
			{
				ClientType previousValue = this._ClientType.Entity;
				if (((previousValue != value) 
							|| (this._ClientType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientType.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._ClientType.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._FK_clientType = value.idClientType;
					}
					else
					{
						this._FK_clientType = default(int);
					}
					this.SendPropertyChanged("ClientType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Potential_Client", Storage="_Potential", ThisKey="FK_potential", OtherKey="idPotential", IsForeignKey=true)]
		public Potential Potential
		{
			get
			{
				return this._Potential.Entity;
			}
			set
			{
				Potential previousValue = this._Potential.Entity;
				if (((previousValue != value) 
							|| (this._Potential.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Potential.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Potential.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._FK_potential = value.idPotential;
					}
					else
					{
						this._FK_potential = default(int);
					}
					this.SendPropertyChanged("Potential");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Client", Storage="_User", ThisKey="FK_user", OtherKey="idUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._FK_user = value.idUser;
					}
					else
					{
						this._FK_user = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientTypes")]
	public partial class ClientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idClientType;
		
		private string _name;
		
		private bool _hasProducts;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClientTypeChanging(int value);
    partial void OnidClientTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnhasProductsChanging(bool value);
    partial void OnhasProductsChanged();
    #endregion
		
		public ClientType()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClientType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idClientType
		{
			get
			{
				return this._idClientType;
			}
			set
			{
				if ((this._idClientType != value))
				{
					this.OnidClientTypeChanging(value);
					this.SendPropertyChanging();
					this._idClientType = value;
					this.SendPropertyChanged("idClientType");
					this.OnidClientTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasProducts", DbType="Bit NOT NULL")]
		public bool hasProducts
		{
			get
			{
				return this._hasProducts;
			}
			set
			{
				if ((this._hasProducts != value))
				{
					this.OnhasProductsChanging(value);
					this.SendPropertyChanging();
					this._hasProducts = value;
					this.SendPropertyChanged("hasProducts");
					this.OnhasProductsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Client", Storage="_Clients", ThisKey="idClientType", OtherKey="FK_clientType")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Options")]
	public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOption;
		
		private string _description;
		
		private int _FK_question;
		
		private bool _active;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOptionChanging(int value);
    partial void OnidOptionChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnFK_questionChanging(int value);
    partial void OnFK_questionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Option()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOption", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOption
		{
			get
			{
				return this._idOption;
			}
			set
			{
				if ((this._idOption != value))
				{
					this.OnidOptionChanging(value);
					this.SendPropertyChanging();
					this._idOption = value;
					this.SendPropertyChanged("idOption");
					this.OnidOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_question", DbType="Int NOT NULL")]
		public int FK_question
		{
			get
			{
				return this._FK_question;
			}
			set
			{
				if ((this._FK_question != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_questionChanging(value);
					this.SendPropertyChanging();
					this._FK_question = value;
					this.SendPropertyChanged("FK_question");
					this.OnFK_questionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Option_Answer", Storage="_Answers", ThisKey="idOption", OtherKey="FK_option")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Option", Storage="_Question", ThisKey="FK_question", OtherKey="idQuestion", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Options.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Options.Add(this);
						this._FK_question = value.idQuestion;
					}
					else
					{
						this._FK_question = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Option = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Option = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Potentials")]
	public partial class Potential : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPotential;
		
		private string _name;
		
		private EntitySet<Client> _Clients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPotentialChanging(int value);
    partial void OnidPotentialChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Potential()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPotential", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPotential
		{
			get
			{
				return this._idPotential;
			}
			set
			{
				if ((this._idPotential != value))
				{
					this.OnidPotentialChanging(value);
					this.SendPropertyChanging();
					this._idPotential = value;
					this.SendPropertyChanged("idPotential");
					this.OnidPotentialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Potential_Client", Storage="_Clients", ThisKey="idPotential", OtherKey="FK_potential")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Potential = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Potential = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProduct;
		
		private string _name;
		
		private bool _active;
		
		private EntitySet<ProductsPerVisit> _ProductsPerVisits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProductChanging(int value);
    partial void OnidProductChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Product()
		{
			this._ProductsPerVisits = new EntitySet<ProductsPerVisit>(new Action<ProductsPerVisit>(this.attach_ProductsPerVisits), new Action<ProductsPerVisit>(this.detach_ProductsPerVisits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idProduct
		{
			get
			{
				return this._idProduct;
			}
			set
			{
				if ((this._idProduct != value))
				{
					this.OnidProductChanging(value);
					this.SendPropertyChanging();
					this._idProduct = value;
					this.SendPropertyChanged("idProduct");
					this.OnidProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsPerVisit", Storage="_ProductsPerVisits", ThisKey="idProduct", OtherKey="FK_product")]
		public EntitySet<ProductsPerVisit> ProductsPerVisits
		{
			get
			{
				return this._ProductsPerVisits;
			}
			set
			{
				this._ProductsPerVisits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductsPerVisits(ProductsPerVisit entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductsPerVisits(ProductsPerVisit entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductsPerVisit")]
	public partial class ProductsPerVisit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProductPerVisit;
		
		private int _FK_visit;
		
		private int _FK_product;
		
		private int _quantity;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidProductPerVisitChanging(int value);
    partial void OnidProductPerVisitChanged();
    partial void OnFK_visitChanging(int value);
    partial void OnFK_visitChanged();
    partial void OnFK_productChanging(int value);
    partial void OnFK_productChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public ProductsPerVisit()
		{
			this._Product = default(EntityRef<Product>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProductPerVisit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idProductPerVisit
		{
			get
			{
				return this._idProductPerVisit;
			}
			set
			{
				if ((this._idProductPerVisit != value))
				{
					this.OnidProductPerVisitChanging(value);
					this.SendPropertyChanging();
					this._idProductPerVisit = value;
					this.SendPropertyChanged("idProductPerVisit");
					this.OnidProductPerVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_visit", DbType="Int NOT NULL")]
		public int FK_visit
		{
			get
			{
				return this._FK_visit;
			}
			set
			{
				if ((this._FK_visit != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_visitChanging(value);
					this.SendPropertyChanging();
					this._FK_visit = value;
					this.SendPropertyChanged("FK_visit");
					this.OnFK_visitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_product", DbType="Int NOT NULL")]
		public int FK_product
		{
			get
			{
				return this._FK_product;
			}
			set
			{
				if ((this._FK_product != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_productChanging(value);
					this.SendPropertyChanging();
					this._FK_product = value;
					this.SendPropertyChanged("FK_product");
					this.OnFK_productChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductsPerVisit", Storage="_Product", ThisKey="FK_product", OtherKey="idProduct", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductsPerVisits.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductsPerVisits.Add(this);
						this._FK_product = value.idProduct;
					}
					else
					{
						this._FK_product = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_ProductsPerVisit", Storage="_Visit", ThisKey="FK_visit", OtherKey="idVisit", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.ProductsPerVisits.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.ProductsPerVisits.Add(this);
						this._FK_visit = value.idVisit;
					}
					else
					{
						this._FK_visit = default(int);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idQuestion;
		
		private string _question;
		
		private bool _active;
		
		private EntitySet<Option> _Options;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidQuestionChanging(int value);
    partial void OnidQuestionChanged();
    partial void OnquestionChanging(string value);
    partial void OnquestionChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Question()
		{
			this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQuestion", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idQuestion
		{
			get
			{
				return this._idQuestion;
			}
			set
			{
				if ((this._idQuestion != value))
				{
					this.OnidQuestionChanging(value);
					this.SendPropertyChanging();
					this._idQuestion = value;
					this.SendPropertyChanged("idQuestion");
					this.OnidQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Option", Storage="_Options", ThisKey="idQuestion", OtherKey="FK_question")]
		public EntitySet<Option> Options
		{
			get
			{
				return this._Options;
			}
			set
			{
				this._Options.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Options(Option entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reactions")]
	public partial class Reaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idReaction;
		
		private string _description;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidReactionChanging(int value);
    partial void OnidReactionChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Reaction()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idReaction", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idReaction
		{
			get
			{
				return this._idReaction;
			}
			set
			{
				if ((this._idReaction != value))
				{
					this.OnidReactionChanging(value);
					this.SendPropertyChanging();
					this._idReaction = value;
					this.SendPropertyChanged("idReaction");
					this.OnidReactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reaction_Visit", Storage="_Visits", ThisKey="idReaction", OtherKey="FK_reaction")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Reaction = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Reaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _name;
		
		private string _lastName;
		
		private string _username;
		
		private string _password;
		
		private System.DateTime _creationDate;
		
		private string _country;
		
		private string _province;
		
		private string _address1;
		
		private string _address2;
		
		private string _zone;
		
		private string _email;
		
		private string _phone1;
		
		private string _phone2;
		
		private bool _active;
		
		private int _FK_userType;
		
		private EntitySet<Client> _Clients;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OncreationDateChanging(System.DateTime value);
    partial void OncreationDateChanged();
    partial void OncountryChanging(string value);
    partial void OncountryChanged();
    partial void OnprovinceChanging(string value);
    partial void OnprovinceChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void OnzoneChanging(string value);
    partial void OnzoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onphone1Changing(string value);
    partial void Onphone1Changed();
    partial void Onphone2Changing(string value);
    partial void Onphone2Changed();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnFK_userTypeChanging(int value);
    partial void OnFK_userTypeChanged();
    #endregion
		
		public User()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creationDate", DbType="DateTime NOT NULL")]
		public System.DateTime creationDate
		{
			get
			{
				return this._creationDate;
			}
			set
			{
				if ((this._creationDate != value))
				{
					this.OncreationDateChanging(value);
					this.SendPropertyChanging();
					this._creationDate = value;
					this.SendPropertyChanged("creationDate");
					this.OncreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string country
		{
			get
			{
				return this._country;
			}
			set
			{
				if ((this._country != value))
				{
					this.OncountryChanging(value);
					this.SendPropertyChanging();
					this._country = value;
					this.SendPropertyChanged("country");
					this.OncountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_province", DbType="VarChar(50)")]
		public string province
		{
			get
			{
				return this._province;
			}
			set
			{
				if ((this._province != value))
				{
					this.OnprovinceChanging(value);
					this.SendPropertyChanging();
					this._province = value;
					this.SendPropertyChanged("province");
					this.OnprovinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address1", DbType="VarChar(400)")]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="VarChar(400)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zone", DbType="VarChar(50)")]
		public string zone
		{
			get
			{
				return this._zone;
			}
			set
			{
				if ((this._zone != value))
				{
					this.OnzoneChanging(value);
					this.SendPropertyChanging();
					this._zone = value;
					this.SendPropertyChanged("zone");
					this.OnzoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone1", DbType="VarChar(20)")]
		public string phone1
		{
			get
			{
				return this._phone1;
			}
			set
			{
				if ((this._phone1 != value))
				{
					this.Onphone1Changing(value);
					this.SendPropertyChanging();
					this._phone1 = value;
					this.SendPropertyChanged("phone1");
					this.Onphone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone2", DbType="VarChar(20)")]
		public string phone2
		{
			get
			{
				return this._phone2;
			}
			set
			{
				if ((this._phone2 != value))
				{
					this.Onphone2Changing(value);
					this.SendPropertyChanging();
					this._phone2 = value;
					this.SendPropertyChanged("phone2");
					this.Onphone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_userType", DbType="Int NOT NULL")]
		public int FK_userType
		{
			get
			{
				return this._FK_userType;
			}
			set
			{
				if ((this._FK_userType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_userTypeChanging(value);
					this.SendPropertyChanging();
					this._FK_userType = value;
					this.SendPropertyChanged("FK_userType");
					this.OnFK_userTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Client", Storage="_Clients", ThisKey="idUser", OtherKey="FK_user")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="FK_userType", OtherKey="idAgentType", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._FK_userType = value.idAgentType;
					}
					else
					{
						this._FK_userType = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTypes")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAgentType;
		
		private string _name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAgentTypeChanging(int value);
    partial void OnidAgentTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public UserType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAgentType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAgentType
		{
			get
			{
				return this._idAgentType;
			}
			set
			{
				if ((this._idAgentType != value))
				{
					this.OnidAgentTypeChanging(value);
					this.SendPropertyChanging();
					this._idAgentType = value;
					this.SendPropertyChanged("idAgentType");
					this.OnidAgentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="idAgentType", OtherKey="FK_userType")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visits")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idVisit;
		
		private int _FK_client;
		
		private int _FK_reaction;
		
		private string _comment;
		
		private System.DateTime _date;
		
		private System.Nullable<float> _latitude;
		
		private System.Nullable<float> _longitude;
		
		private int _FK_visitType;
		
		private EntitySet<ProductsPerVisit> _ProductsPerVisits;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Reaction> _Reaction;
		
		private EntityRef<VisitType> _VisitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidVisitChanging(int value);
    partial void OnidVisitChanged();
    partial void OnFK_clientChanging(int value);
    partial void OnFK_clientChanged();
    partial void OnFK_reactionChanging(int value);
    partial void OnFK_reactionChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnlatitudeChanging(System.Nullable<float> value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(System.Nullable<float> value);
    partial void OnlongitudeChanged();
    partial void OnFK_visitTypeChanging(int value);
    partial void OnFK_visitTypeChanged();
    #endregion
		
		public Visit()
		{
			this._ProductsPerVisits = new EntitySet<ProductsPerVisit>(new Action<ProductsPerVisit>(this.attach_ProductsPerVisits), new Action<ProductsPerVisit>(this.detach_ProductsPerVisits));
			this._Client = default(EntityRef<Client>);
			this._Reaction = default(EntityRef<Reaction>);
			this._VisitType = default(EntityRef<VisitType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idVisit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idVisit
		{
			get
			{
				return this._idVisit;
			}
			set
			{
				if ((this._idVisit != value))
				{
					this.OnidVisitChanging(value);
					this.SendPropertyChanging();
					this._idVisit = value;
					this.SendPropertyChanged("idVisit");
					this.OnidVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_client", DbType="Int NOT NULL")]
		public int FK_client
		{
			get
			{
				return this._FK_client;
			}
			set
			{
				if ((this._FK_client != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_clientChanging(value);
					this.SendPropertyChanging();
					this._FK_client = value;
					this.SendPropertyChanged("FK_client");
					this.OnFK_clientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_reaction", DbType="Int NOT NULL")]
		public int FK_reaction
		{
			get
			{
				return this._FK_reaction;
			}
			set
			{
				if ((this._FK_reaction != value))
				{
					if (this._Reaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_reactionChanging(value);
					this.SendPropertyChanging();
					this._FK_reaction = value;
					this.SendPropertyChanged("FK_reaction");
					this.OnFK_reactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(400) NOT NULL", CanBeNull=false)]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Real")]
		public System.Nullable<float> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Real")]
		public System.Nullable<float> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_visitType", DbType="Int NOT NULL")]
		public int FK_visitType
		{
			get
			{
				return this._FK_visitType;
			}
			set
			{
				if ((this._FK_visitType != value))
				{
					if (this._VisitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_visitTypeChanging(value);
					this.SendPropertyChanging();
					this._FK_visitType = value;
					this.SendPropertyChanged("FK_visitType");
					this.OnFK_visitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_ProductsPerVisit", Storage="_ProductsPerVisits", ThisKey="idVisit", OtherKey="FK_visit")]
		public EntitySet<ProductsPerVisit> ProductsPerVisits
		{
			get
			{
				return this._ProductsPerVisits;
			}
			set
			{
				this._ProductsPerVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Visit", Storage="_Client", ThisKey="FK_client", OtherKey="idClient", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._FK_client = value.idClient;
					}
					else
					{
						this._FK_client = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reaction_Visit", Storage="_Reaction", ThisKey="FK_reaction", OtherKey="idReaction", IsForeignKey=true)]
		public Reaction Reaction
		{
			get
			{
				return this._Reaction.Entity;
			}
			set
			{
				Reaction previousValue = this._Reaction.Entity;
				if (((previousValue != value) 
							|| (this._Reaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reaction.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Reaction.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._FK_reaction = value.idReaction;
					}
					else
					{
						this._FK_reaction = default(int);
					}
					this.SendPropertyChanged("Reaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VisitType_Visit", Storage="_VisitType", ThisKey="FK_visitType", OtherKey="idVisitType", IsForeignKey=true)]
		public VisitType VisitType
		{
			get
			{
				return this._VisitType.Entity;
			}
			set
			{
				VisitType previousValue = this._VisitType.Entity;
				if (((previousValue != value) 
							|| (this._VisitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VisitType.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._VisitType.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._FK_visitType = value.idVisitType;
					}
					else
					{
						this._FK_visitType = default(int);
					}
					this.SendPropertyChanged("VisitType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductsPerVisits(ProductsPerVisit entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_ProductsPerVisits(ProductsPerVisit entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
	}
}
#pragma warning restore 1591
